package ru.yandex.practicum.filmorate.storage.entity;

import ru.yandex.practicum.filmorate.model.entity.Entity;

import java.util.List;

/**
 * Интерфейс-шаблон для хранилища объектов фильмов и пользователей
 * предцсмаривается подход CRUD
 * подразумевается использование идентификатора.
 * как дженерик подрузумевается класс фильма или пользователя, имеющий поле и сеттер/геттер идентификатора
 * @see Entity
 * @param <T> класс фильма или пользователя
 */

public interface EntityStorable<T extends Entity> {

    /**
     * сохранение экземпляра фильма или пользователя
     * @param entity  экземпляр дял сохранения
     * @return сохраненный экземпляр
     */
    T create(T entity);

    /**
     * получение фильма или пользователя из хранилища по идентификатору
     * @param entityId присвоенный идентификатор фильма или пользователя
     * @return экземпляр фильма или пользователя, полученный по идентификатору
     */
    T read(Long entityId);

    /**
     * модификация  фильма или пользователя в хранилище
     * @param entity новый экземпляр фильма или пользователя
     * @return экземпляр фильма или пользователя
     */
    T update(T entity);

    /**
     * удаление экземпляра фильма или пользователя
     * @implNote Не и спользуется в сервис-классаах и контроллер классах, т.к. не определены ендпойнты по ТЗ
     * @param id идентификатор экземпляра entity для удаления
     * @return экземпляр, удаленный и полученный из хранилища
     */
    T delete(Long id);

    /**
     * получение списка всех фильмов или пользователей
     * @return список
     */
    //параметры метода или новый метод
    List<T> getAll();
}
